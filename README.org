* org-protocol-capture-html
org-protocol is awesome, but browsers do a pretty poor job of turning a page's HTML content into plain-text.  However, Pandoc supports converting /from/ HTML /to/ org-mode, so we can use it to turn HTML into Org-mode content!  It can even turn HTML tables into Org tables!
* Screenshot
Here's an example of what you get in Emacs from capturing [[http://kitchingroup.cheme.cmu.edu/blog/2014/07/17/Pandoc-does-org-mode-now/][this page]]:

[[screenshot.png]]
* Contents :TOC:
 - [[#org-protocol-capture-html][org-protocol-capture-html]]
 - [[#screenshot][Screenshot]]
 - [[#requirements][Requirements]]
 - [[#bookmarklet][Bookmarklet]]
     - [[#html-grabbing-function][HTML-grabbing function]]
     - [[#bookmarklet][Bookmarklet]]
 - [[#emacs][Emacs]]
     - [[#org-capture-template][org-capture Template]]
 - [[#shell-script][Shell script]]
 - [[#changelog][Changelog]]
     - [[#2016-03-23-wed][<2016-03-23 Wed>]]
 - [[#to-do][To-Do]]
     - [[#handle-long-chunks-of-html][Handle long chunks of HTML]]
     - [[#package-for-melpa][Package for MELPA]]

* Requirements
+ *[[http://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol]]*: This is what connects org-mode to the "outside world" using a MIME protocol handler.  The instructions on the org-protocol page are a bit out of date, so you might want to try [[http://stackoverflow.com/questions/7464951/how-to-make-org-protocol-work/12751732#12751732][these instructions]] instead.
+ *Pandoc*: I'm currently using Pandoc from Ubuntu Trusty, at version 1.12.2.1, and it is able to convert from HTML to org.
+ *[[https://github.com/buriy/python-readability][python-readability]]*: This is optional but very handy.  It lets you automatically capture just the article or main content from a page.
+ The shell script uses =curl= to download URLs (if you use it in that mode).
* Bookmarklet
** HTML-grabbing function
This function gets the HTML from the browser's selection.  It's from [[http://stackoverflow.com/a/6668159/712624][this answer]] on StackOverflow.
#+BEGIN_SRC js
  function () {
      var html = "";
  
      if (typeof content.document.getSelection != "undefined") {
          var sel = content.document.getSelection();
          if (sel.rangeCount) {
              var container = document.createElement("div");
              for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                  container.appendChild(sel.getRangeAt(i).cloneContents());
              }
              html = container.innerHTML;
          }
      } else if (typeof document.selection != "undefined") {
          if (document.selection.type == "Text") {
              html = document.selection.createRange().htmlText;
          }
      }
  
      var relToAbs = function (href) {
          var a = content.document.createElement("a");
          a.href = href;
          var abs = a.protocol + "//" + a.host + a.pathname + a.search + a.hash;
          a.remove();
          return abs;
      };
      var elementTypes = [
          ['a', 'href'],
          ['img', 'src']
      ];
  
      var div = content.document.createElement('div');
      div.innerHTML = html;
  
      elementTypes.map(function(elementType) {
          var elements = div.getElementsByTagName(elementType[0]);
          for (var i = 0; i < elements.length; i++) {
              elements[i].setAttribute(elementType[1], relToAbs(elements[i].getAttribute(elementType[1])));
          }
      });
      return div.innerHTML;
  }
#+END_SRC

Here's a one-line version of it, better for pasting into bookmarklets and such:
#+BEGIN_SRC js
  function () {var html = ""; if (typeof content.document.getSelection != "undefined") {var sel = content.document.getSelection(); if (sel.rangeCount) {var container = document.createElement("div"); for (var i = 0, len = sel.rangeCount; i < len; ++i) {container.appendChild(sel.getRangeAt(i).cloneContents());} html = container.innerHTML;}} else if (typeof document.selection != "undefined") {if (document.selection.type == "Text") {html = document.selection.createRange().htmlText;}} var relToAbs = function (href) {var a = content.document.createElement("a"); a.href = href; var abs = a.protocol + "//" + a.host + a.pathname + a.search + a.hash; a.remove(); return abs;}; var elementTypes = [['a', 'href'], ['img', 'src']]; var div = content.document.createElement('div'); div.innerHTML = html; elementTypes.map(function(elementType) {var elements = div.getElementsByTagName(elementType[0]); for (var i = 0; i < elements.length; i++) {elements[i].setAttribute(elementType[1], relToAbs(elements[i].getAttribute(elementType[1])));}}); return div.innerHTML;}
#+END_SRC
** Bookmarklet
That function goes in the bookmarklet, and the =org-protocol= sub-protocol is changed to =capture-html:=, resulting in this:
#+BEGIN_SRC js
  content.location.href = 'org-protocol://capture-html://w/' + encodeURIComponent(content.location.href) + '/' + encodeURIComponent(content.document.title) + '/' + encodeURIComponent(function () {var html = ""; if (typeof content.document.getSelection != "undefined") {var sel = content.document.getSelection(); if (sel.rangeCount) {var container = document.createElement("div"); for (var i = 0, len = sel.rangeCount; i < len; ++i) {container.appendChild(sel.getRangeAt(i).cloneContents());} html = container.innerHTML;}} else if (typeof document.selection != "undefined") {if (document.selection.type == "Text") {html = document.selection.createRange().htmlText;}} var relToAbs = function (href) {var a = content.document.createElement("a"); a.href = href; var abs = a.protocol + "//" + a.host + a.pathname + a.search + a.hash; a.remove(); return abs;}; var elementTypes = [['a', 'href'], ['img', 'src']]; var div = content.document.createElement('div'); div.innerHTML = html; elementTypes.map(function(elementType) {var elements = div.getElementsByTagName(elementType[0]); for (var i = 0; i < elements.length; i++) {elements[i].setAttribute(elementType[1], relToAbs(elements[i].getAttribute(elementType[1])));}}); return div.innerHTML;}());
#+END_SRC
*Note:* I use the Pentadactyl extension, so I had to use ~content.location.href~ instead of ~location.href~, ~content.document~ instead of ~window~, and ~content.document.selection~ instead of ~window.getSelection()~.  This might work in plain Firefox too, or you might need to adjust it.
* Emacs

Put =org-protocol-capture-html.el= in your =load-path= and add to your init file:

#+BEGIN_SRC elisp
(require 'org-protocol-capture-html)
#+END_SRC

** org-capture Template

You need a suitable =org-capture= template.  I recommend the following one.  Whatever you choose, the default selection key is =w=, so if you want to use a different key, you'll need to modify the script and the bookmarklet.

#+BEGIN_SRC elisp
("w" "Web site" entry 
  (file "")
  "* %a :website:\n\n%U %?\n\n%:initial")
#+END_SRC

* Shell script
The [[org-protocol-capture-html.sh][shell script]] is handy for piping any HTML (or plain-text) content to Org through the shell, or downloading and capturing any URL directly (without a browser), but it's not required.

* Changelog

** <2016-03-23 Wed>

+ Add URL downloading to the shell script.  Now you can run =org-protocol-capture-html.sh -u http://example.com= and it will download and capture the page.
+ Add =org-capture= template to the readme.  This will make it much easier for new users.

* To-Do
** Handle long chunks of HTML
If you try to capture too long a chunk of HTML, it will fail with "argument list too long errors" from =emacsclient=.  To work around this will require capturing via STDIN instead of arguments.  Since org-protocol is based on using URLs, this will probably require using a shell script and a new Emacs function, and perhaps another MIME protocol-handler.  Even then, it might still run into problems, because the data is passed to the shell script as an argument in the protocol-handler.  Working around that would probably require a non-protocol-handler-based method using a browser extension to send the HTML directly via STDIN.  Might be possible with Pentadactyl instead of making an entirely new browser extension.  Also, maybe the [[https://addons.mozilla.org/en-US/firefox/addon/org-mode-capture/][Org-mode Capture]] Firefox extension could be extended (...) to do this.

However, most of the time, this is not a problem.
** Package for MELPA
This would be nice.
